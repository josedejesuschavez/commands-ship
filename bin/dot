#!/bin/bash

function total_is() {
  total_expected="${1}"
  arguments="${@:2}"

  total_arguments=0
  for argument in ${arguments[*]}; do
    total_arguments=$((total_arguments + 1))
  done

  [[ ${total_arguments} -eq ${total_expected} ]]
}

function read_params_in_file() {
  command_selected="${1}"
  number_line_request="${2}"

  number_line=1

  while IFS= read -r line || [[ -n "${line}" ]]; do
    if [ "${number_line_request}" == "${number_line}" ]; then
      printf "%s" "${line}"
    fi
    
    number_line=$((number_line + 1))
  done < "${command_selected}"
}


function read_param() {
  param="${1}"
  subcommand="${2}"
  if [ "${subcommand}" != "" ]; then
    if [ "${subcommand}" = "${param}" ]; then
      read -r param_arg
    else
      subcommand="${subcommand/\"/ }"
      subcommand="${subcommand/\"/ }"
      param_arg="$(eval ${subcommand})"
    fi
    printf "%s" "${param_arg}" 
  fi
  printf "%s" " "
}

function fzf_prompt() {
  local -r paths="${1}"

  script="$(
      echo "${paths}" |
      xargs -I _ sh -c 'echo "_"' |
      fzf \
        --height 100% \
        --layout=reverse \
        --preview 'cat $(find ${DOTFILES_PATH} -type f | grep $(echo {} | cut -d" " -f 1)/$(echo {} | cut -d" " -f 2)/doc) cat $(find ${HOME}/.commands/${1}/commands/${2}/doc) ' \
        --preview-window right:80
  )"

  command_selected="${script}"

  module="$(echo ${command_selected} | cut -d" " -f 1)"
  command="$(echo ${command_selected} | cut -d" " -f 2)"

  path_command_params=$(find ${DOTFILES_PATH} -type f | grep ${module}/${command}/params)
  path_command_script=$(find ${DOTFILES_PATH} -type f | grep ${module}/${command}/script)
  
  if [ "${path_command_script}" = "" ]; then
    path_command_params=$(find "${HOME}/.commands" -type f | grep ${module}/commands/${command}/params)
    path_command_script=$(find "${HOME}/.commands" -type f | grep ${module}/commands/${command}/script)
  fi

  args=""

  if [ ! "${command_selected}" = "" ]; then
    params_readed=$(cat ${path_command_params})

    if [ ! "${params_readed}" = "" ]; then
      echo "Insert parameters!!!"
    fi

    param_1="$(read_params_in_file "${path_command_params}" "1")"
    param_2="$(read_params_in_file "${path_command_params}" "2")"
    param_3="$(read_params_in_file "${path_command_params}" "3")"
    param_4="$(read_params_in_file "${path_command_params}" "4")"
    param_5="$(read_params_in_file "${path_command_params}" "5")"
    param_6="$(read_params_in_file "${path_command_params}" "6")"

    subcommand_1="$(echo ${param_1} | cut -d"=" -f 2-10)"
    subcommand_2="$(echo ${param_2} | cut -d"=" -f 2-10)"
    subcommand_3="$(echo ${param_3} | cut -d"=" -f 2-10)"
    subcommand_4="$(echo ${param_4} | cut -d"=" -f 2-10)"
    subcommand_5="$(echo ${param_5} | cut -d"=" -f 2-10)"
    subcommand_6="$(echo ${param_6} | cut -d"=" -f 2-10)"

    if [ "${param_1}" != "" ]; then
      param_1_label="${param_1/_/ }"
      param_1_label="$(echo ${param_1_label} | cut -d"=" -f 1)"
      echo "${param_1_label}"
    fi
    param_arg1="$(read_param "${param_1}" "${subcommand_1}")"

    if [ "${param_2}" != "" ]; then
      param_2_label="${param_2/_/ }"
      param_2_label="$(echo ${param_2_label} | cut -d"=" -f 1)"
      echo "${param_2_label}"
    fi
    param_arg2="$(read_param "${param_2}" "${subcommand_2}")"

    if [ "${param_3}" != "" ]; then
      param_3_label="${param_3/_/ }"
      param_3_label="$(echo ${param_3_label} | cut -d"=" -f 1)"
      echo "${param_3_label}"
    fi
    param_arg3="$(read_param "${param_3}" "${subcommand_3}")"

    if [ "${param_4}" != "" ]; then
      param_4_label="${param_4/_/ }"
      param_4_label="$(echo ${param_4_label} | cut -d"=" -f 1)"
      echo "${param_4_label}"
    fi
    param_arg4="$(read_param "${param_4}" "${subcommand_4}")"

    if [ "${param_5}" != "" ]; then
      param_5_label="${param_5/_/ }"
      param_5_label="$(echo ${param_5_label} | cut -d"=" -f 1)"
      echo "${param_5_label}"
    fi
    param_arg5="$(read_param "${param_5}" "${subcommand_5}")"

    if [ "${param_6}" != "" ]; then
      param_6_label="${param_6/_/ }"
      param_6_label="$(echo ${param_6_label} | cut -d"=" -f 1)"
      echo "${param_6_label}"
    fi
    param_arg6="$(read_param "${param_6}" "${subcommand_6}")"

    args="${param_arg1} ${param_arg2} ${param_arg3} ${param_arg4} ${param_arg5} ${param_arg6}"
    "${path_command_script}" ${args}
  fi
}

list_scripts_path() {
  commands=$(find "${DOTFILES_PATH}/commands" -maxdepth 2 -mindepth 2 -type d | awk -F '/' '{print $6" "$7}')
  commands_custom=$(find "${HOME}/.commands" -maxdepth 3 -mindepth 3 -type d | awk -F "/" '{print $5" "$7}')

  printf "%s\n" "${commands}" | sort -u
  printf "%s\n" "${commands_custom}" | sort -u
}

if total_is 0 "$@"; then
  fzf_prompt "$(list_scripts_path)"
elif total_is 1 "$@"; then
  fzf_prompt "$(list_scripts_path | grep "${1}")"
else
  script="${1}"
    
  shift 1

  finded_script="$(find ${DOTFILES_PATH} -type d -name ${script})"
  "${finded_script}/script" "$@"
fi
